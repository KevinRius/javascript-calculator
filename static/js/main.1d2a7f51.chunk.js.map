{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","equation","result","handleEquation","e","_this","setState","test","target","innerText","handleAC","handleEqual","eval","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","reactstrap__WEBPACK_IMPORTED_MODULE_6__","className","this","reactstrap__WEBPACK_IMPORTED_MODULE_7__","reactstrap__WEBPACK_IMPORTED_MODULE_8__","onClick","color","Component","Boolean","window","location","hostname","match","ReactDOM","render","react_default","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2rCAIMA,yqBACJC,MAAQ,CACNC,SAAU,IACVC,OAAQ,SAGVC,eAAiB,SAACC,GAChB,IAAIH,EAAWI,MAAKL,MAAMC,SACT,MAAbA,IACFA,EAAW,IAEa,UAAtBI,MAAKL,MAAME,OACbG,MAAKC,SAAS,CAACJ,OAAQ,IACQ,IAAtBG,MAAKL,MAAME,SACpBD,EAAWI,MAAKL,MAAME,OACtBG,MAAKC,SAAS,CAACJ,OAAQ,KAErB,MAAMK,KAAKN,IAAa,MAAMM,KAAKH,EAAEI,OAAOC,WAC9CJ,MAAKC,SAAS,CAACJ,OAAQ,WAGvBD,GAAuBG,EAAEI,OAAOC,UAChCJ,MAAKC,SAAS,CAACL,qBAInBS,SAAW,WACTL,MAAKC,SAAS,CACZL,SAAU,IACVC,OAAQ,WAIZS,YAAc,WACZ,GAAI,MAAMJ,KAAKF,MAAKL,MAAMC,UAAW,CACnC,IAAIC,OAASU,KAAKP,MAAKL,MAAMC,UAC7BI,MAAKC,SAAS,CAACJ,OAAQA,cAEvBG,MAAKC,SAAS,CAACJ,OAAQ,yUAKzB,OACEW,2CAAAC,EAAAC,cAACC,wCAAA,EAAD,CAAWC,UAAU,cACnBJ,2CAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,2CAAAC,EAAAC,cAAA,OAAKE,UAAU,gDACbJ,2CAAAC,EAAAC,cAAA,OAAKE,UAAU,cACbJ,2CAAAC,EAAAC,cAAA,UAAKG,KAAKlB,MAAMC,UAChBY,2CAAAC,EAAAC,cAAA,UAAKG,KAAKlB,MAAME,SAElBW,2CAAAC,EAAAC,cAACI,wCAAA,EAAD,CAAKF,UAAU,OACbJ,2CAAAC,EAAAC,cAACK,wCAAA,EAAD,CAAQC,QAASH,KAAKR,SAAUY,MAAM,SAASL,UAAU,SAAzD,MACAJ,2CAAAC,EAAAC,cAACK,wCAAA,EAAD,CAAQC,QAASH,KAAKf,eAAgBmB,MAAM,OAAOL,UAAU,SAA7D,KACAJ,2CAAAC,EAAAC,cAACK,wCAAA,EAAD,CAAQC,QAASH,KAAKf,eAAgBmB,MAAM,OAAOL,UAAU,SAA7D,KACAJ,2CAAAC,EAAAC,cAACK,wCAAA,EAAD,CAAQC,QAASH,KAAKf,eAAgBmB,MAAM,UAAUL,UAAU,UAAhE,KACAJ,2CAAAC,EAAAC,cAACK,wCAAA,EAAD,CAAQC,QAASH,KAAKf,eAAgBmB,MAAM,UAAUL,UAAU,SAAhE,KACAJ,2CAAAC,EAAAC,cAACK,wCAAA,EAAD,CAAQC,QAASH,KAAKf,eAAgBmB,MAAM,UAAUL,UAAU,SAAhE,KACAJ,2CAAAC,EAAAC,cAACK,wCAAA,EAAD,CAAQC,QAASH,KAAKf,eAAgBmB,MAAM,OAAOL,UAAU,SAA7D,KACAJ,2CAAAC,EAAAC,cAACK,wCAAA,EAAD,CAAQC,QAASH,KAAKf,eAAgBmB,MAAM,UAAUL,UAAU,SAAhE,KACAJ,2CAAAC,EAAAC,cAACK,wCAAA,EAAD,CAAQC,QAASH,KAAKf,eAAgBmB,MAAM,UAAUL,UAAU,SAAhE,KACAJ,2CAAAC,EAAAC,cAACK,wCAAA,EAAD,CAAQC,QAASH,KAAKf,eAAgBmB,MAAM,UAAUL,UAAU,SAAhE,KACAJ,2CAAAC,EAAAC,cAACK,wCAAA,EAAD,CAAQC,QAASH,KAAKf,eAAgBmB,MAAM,OAAOL,UAAU,SAA7D,KACAJ,2CAAAC,EAAAC,cAAA,OAAKE,UAAU,gBACbJ,2CAAAC,EAAAC,cAACK,wCAAA,EAAD,CAAQC,QAASH,KAAKf,eAAgBmB,MAAM,UAAUL,UAAU,SAAhE,KACAJ,2CAAAC,EAAAC,cAACK,wCAAA,EAAD,CAAQC,QAASH,KAAKf,eAAgBmB,MAAM,UAAUL,UAAU,SAAhE,KACAJ,2CAAAC,EAAAC,cAACK,wCAAA,EAAD,CAAQC,QAASH,KAAKf,eAAgBmB,MAAM,UAAUL,UAAU,SAAhE,KACAJ,2CAAAC,EAAAC,cAACK,wCAAA,EAAD,CAAQC,QAASH,KAAKf,eAAgBmB,MAAM,UAAUL,UAAU,SAAhE,KACAJ,2CAAAC,EAAAC,cAACK,wCAAA,EAAD,CAAQC,QAASH,KAAKf,eAAgBmB,MAAM,UAAUL,UAAU,SAAhE,MAEFJ,2CAAAC,EAAAC,cAACK,wCAAA,EAAD,CAAQC,QAASH,KAAKP,YAAaW,MAAM,UAAUL,UAAU,SAA7D,kBAtEIM,8CA+EHxB,sLCvEKyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOC,EAAAjB,EAAAC,cAAChB,EAAA,EAAD,MAASiC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1d2a7f51.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Container, Row, Button} from 'reactstrap';\n\n\nclass App extends Component {\n  state = {\n    equation: '0',\n    result: 0\n  };\n\n  handleEquation = (e) => {\n    let equation = this.state.equation;\n    if (equation === '0') {\n      equation = '';\n    } \n    if (this.state.result === 'ERROR') {\n      this.setState({result: 0});\n    } else if (this.state.result !== 0) {\n      equation = this.state.result;\n      this.setState({result: 0});\n    }\n    if (/\\D$/.test(equation) && /\\D$/.test(e.target.innerText)) {\n      this.setState({result: 'ERROR'})\n    }\n    else {\n      equation = equation + (e.target.innerText);\n      this.setState({equation})\n    }\n  }\n\n  handleAC = () => {\n    this.setState({\n      equation: '0',\n      result: 0\n    })\n  }\n\n  handleEqual = () => {\n    if (/\\d$/.test(this.state.equation)) {\n      let result = eval(this.state.equation);\n      this.setState({result: result});\n    } else {\n      this.setState({result: 'ERROR'});\n    }\n  }\n\n  render() {\n    return (\n      <Container className=\"App vh-100\">\n        <div className=\"row h-100\">\n          <div className=\"calculator col-12 align-self-center bg-light\">\n            <div className=\"text-right\">\n              <h5>{this.state.equation}</h5>\n              <h3>{this.state.result}</h3>\n            </div>\n            <Row className=\"pad\">\n              <Button onClick={this.handleAC} color=\"danger\" className=\"col-6\">AC</Button>\n              <Button onClick={this.handleEquation} color=\"info\" className=\"col-3\">/</Button>\n              <Button onClick={this.handleEquation} color=\"info\" className=\"col-3\">*</Button>\n              <Button onClick={this.handleEquation} color=\"primary\" className=\"col-3 \">7</Button>\n              <Button onClick={this.handleEquation} color=\"primary\" className=\"col-3\">8</Button>\n              <Button onClick={this.handleEquation} color=\"primary\" className=\"col-3\">9</Button>\n              <Button onClick={this.handleEquation} color=\"info\" className=\"col-3\">-</Button>\n              <Button onClick={this.handleEquation} color=\"primary\" className=\"col-3\">4</Button>\n              <Button onClick={this.handleEquation} color=\"primary\" className=\"col-3\">5</Button>\n              <Button onClick={this.handleEquation} color=\"primary\" className=\"col-3\">6</Button>\n              <Button onClick={this.handleEquation} color=\"info\" className=\"col-3\">+</Button>\n              <div className=\"row w-75 m-0\">\n                <Button onClick={this.handleEquation} color=\"primary\" className=\"col-4\">1</Button>\n                <Button onClick={this.handleEquation} color=\"primary\" className=\"col-4\">2</Button>\n                <Button onClick={this.handleEquation} color=\"primary\" className=\"col-4\">3</Button>\n                <Button onClick={this.handleEquation} color=\"primary\" className=\"col-8\">0</Button>\n                <Button onClick={this.handleEquation} color=\"primary\" className=\"col-4\">.</Button>\n              </div>\n              <Button onClick={this.handleEqual} color=\"success\" className=\"col-3\">=</Button>\n            </Row>\n          </div>\n        </div>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}